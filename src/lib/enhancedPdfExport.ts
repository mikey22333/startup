import jsPDF from 'jspdf'
import 'jspdf-autotable'
import { Chart, ChartConfiguration, ChartType, registerables } from 'chart.js'
import html2canvas from 'html2canvas'

// Register Chart.js components
Chart.register(...registerables)

// Extend jsPDF type to include autoTable
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF
  }
}

export interface BusinessPlan {
  feasibility: {
    marketType: string
    difficultyLevel: string
    timeToLaunch: string
    investmentNeeded: string
    marketingBudget: string
  }
  executiveSummary: string
  marketAnalysis: string
  businessModel: string
  financialProjections: string
  marketingStrategy: string
  operationsOverview: string
  riskAssessment: any
  implementation: string
  legal: string
  tools: Array<{
    name: string
    purpose: string
    pricing: string
    category: string
  }>
  funding: Array<{
    platform: string
    type: string
    range: string
    fees: string
    timeline: string
    successRate: string
    description: string
  }>
}

// Generate market growth data for charts
function generateMarketGrowthData() {
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  const currentDate = new Date()
  const growthData: number[] = []
  
  let baseValue = 50
  const baseGrowthRate = 8 // 8% annual growth
  
  for (let i = 0; i < 12; i++) {
    const monthlyGrowth = Math.pow(1 + baseGrowthRate / 100, i / 12)
    const month = (currentDate.getMonth() - (11 - i) + 12) % 12
    
    let seasonalMultiplier = 1
    if (month >= 9) seasonalMultiplier = 1.2  // Q4 boost
    else if (month <= 2) seasonalMultiplier = 0.9  // Q1 dip
    else if (month >= 6 && month <= 8) seasonalMultiplier = 1.1  // Summer activity
    
    const variance = 0.95 + Math.random() * 0.1
    const value = Math.round(baseValue * monthlyGrowth * seasonalMultiplier * variance)
    growthData.push(value)
    baseValue = value
  }
  
  return { labels: months, data: growthData }
}

// Generate financial projection data
function generateFinancialData() {
  const quarters = ['Q1', 'Q2', 'Q3', 'Q4']
  const revenue = [25000, 45000, 75000, 120000]
  const costs = [15000, 25000, 40000, 60000]
  const profit = revenue.map((r, i) => r - costs[i])
  
  return { quarters, revenue, costs, profit }
}

// Create chart as canvas and return base64 image
async function createChartImage(config: ChartConfiguration, width: number = 400, height: number = 300): Promise<string> {
  return new Promise((resolve) => {
    // Create a temporary canvas
    const canvas = document.createElement('canvas')
    canvas.width = width
    canvas.height = height
    canvas.style.display = 'none'
    document.body.appendChild(canvas)
    
    const ctx = canvas.getContext('2d')!
    const chart = new Chart(ctx, config)
    
    // Wait for chart to render
    setTimeout(() => {
      const imageData = canvas.toDataURL('image/png')
      chart.destroy()
      document.body.removeChild(canvas)
      resolve(imageData)
    }, 500)
  })
}

// Enhanced PDF Export with charts, tables, and rich formatting
export async function exportToPDF(plan: BusinessPlan): Promise<void> {
  try {
    const pdf = new jsPDF('p', 'mm', 'a4')
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    const margin = 20
    const maxWidth = pageWidth - (2 * margin)
    
    let currentY = margin
    const lineHeight = 7
    const sectionSpacing = 15

    // Helper function to add a new page if needed
    const checkPageBreak = (neededHeight: number) => {
      if (currentY + neededHeight > pageHeight - margin) {
        pdf.addPage()
        currentY = margin
        return true
      }
      return false
    }

    // Helper function to split long text
    const splitText = (text: string, maxWidth: number, fontSize: number) => {
      pdf.setFontSize(fontSize)
      return pdf.splitTextToSize(text, maxWidth)
    }

    // Modern Header with gradient effect
    pdf.setFillColor(59, 130, 246) // Blue gradient start
    pdf.rect(0, 0, pageWidth, 70, 'F')
    
    // Add gradient effect manually with multiple rectangles
    for (let i = 0; i < 20; i++) {
      const alpha = 255 - (i * 10)
      pdf.setFillColor(59 + i * 2, 130 + i, 246 - i)
      pdf.rect(0, 50 + i, pageWidth, 2, 'F')
    }
    
    pdf.setTextColor(255, 255, 255)
    pdf.setFontSize(32)
    pdf.setFont('helvetica', 'bold')
    pdf.text(plan.feasibility.marketType + ' Business Plan', margin, 35)
    
    pdf.setFontSize(14)
    pdf.setFont('helvetica', 'normal')
    pdf.text('Generated by PlanSpark AI', margin, 50)
    pdf.text(new Date().toLocaleDateString(), pageWidth - margin - 40, 50)
    
    currentY = 90

    // Executive Summary with styled box
    pdf.setFillColor(248, 250, 252)
    pdf.setDrawColor(226, 232, 240)
    pdf.rect(margin, currentY - 5, maxWidth, 60, 'FD')
    
    pdf.setTextColor(51, 65, 85)
    pdf.setFontSize(18)
    pdf.setFont('helvetica', 'bold')
    pdf.text('Executive Summary', margin + 10, currentY + 10)
    
    pdf.setFontSize(11)
    pdf.setFont('helvetica', 'normal')
    pdf.setTextColor(71, 85, 105)
    const execLines = splitText(plan.executiveSummary, maxWidth - 20, 11)
    let summaryY = currentY + 20
    execLines.slice(0, 5).forEach((line: string) => {
      pdf.text(line, margin + 10, summaryY)
      summaryY += lineHeight
    })
    
    currentY += 75

    // Key Metrics Table with enhanced styling
    checkPageBreak(80)
    pdf.setTextColor(51, 65, 85)
    pdf.setFontSize(18)
    pdf.setFont('helvetica', 'bold')
    pdf.text('Key Metrics', margin, currentY)
    currentY += 15

    const metricsData = [
      ['Business Type', plan.feasibility.marketType],
      ['Difficulty Level', plan.feasibility.difficultyLevel],
      ['Time to Launch', plan.feasibility.timeToLaunch],
      ['Investment Needed', plan.feasibility.investmentNeeded],
      ['Marketing Budget', plan.feasibility.marketingBudget]
    ]

    pdf.autoTable({
      startY: currentY,
      head: [['Metric', 'Value']],
      body: metricsData,
      theme: 'grid',
      styles: {
        fontSize: 11,
        cellPadding: 8,
        textColor: [51, 65, 85],
        lineColor: [226, 232, 240],
        lineWidth: 0.5
      },
      headStyles: {
        fillColor: [59, 130, 246],
        textColor: [255, 255, 255],
        fontStyle: 'bold',
        fontSize: 12
      },
      alternateRowStyles: {
        fillColor: [248, 250, 252]
      },
      columnStyles: {
        0: { fontStyle: 'bold', cellWidth: maxWidth * 0.4 },
        1: { cellWidth: maxWidth * 0.6 }
      }
    })

    currentY = (pdf as any).lastAutoTable.finalY + 20

    // Market Growth Chart
    checkPageBreak(120)
    pdf.setFontSize(18)
    pdf.setFont('helvetica', 'bold')
    pdf.setTextColor(51, 65, 85)
    pdf.text('Market Growth Projection', margin, currentY)
    currentY += 15

    const marketData = generateMarketGrowthData()
    const chartConfig: ChartConfiguration = {
      type: 'line',
      data: {
        labels: marketData.labels,
        datasets: [{
          label: 'Market Growth Index',
          data: marketData.data,
          borderColor: '#3B82F6',
          backgroundColor: 'rgba(59, 130, 246, 0.1)',
          tension: 0.4,
          fill: true,
          pointRadius: 4,
          borderWidth: 3,
          pointBackgroundColor: '#3B82F6',
          pointBorderColor: '#ffffff',
          pointBorderWidth: 2,
        }]
      },
      options: {
        responsive: false,
        animation: false,
        plugins: {
          legend: {
            display: true,
            position: 'bottom',
            labels: {
              font: { size: 12 },
              color: '#374151'
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: { color: '#E5E7EB' },
            ticks: { color: '#6B7280', font: { size: 10 } }
          },
          x: {
            grid: { color: '#E5E7EB' },
            ticks: { color: '#6B7280', font: { size: 10 } }
          }
        }
      }
    }

    try {
      const chartImage = await createChartImage(chartConfig, 350, 200)
      pdf.addImage(chartImage, 'PNG', margin, currentY, maxWidth * 0.8, 100)
      currentY += 110
    } catch (error) {
      console.error('Chart generation failed:', error)
      // Fallback: Create a simple table with the data
      pdf.autoTable({
        startY: currentY,
        head: [marketData.labels],
        body: [marketData.data.map(d => d.toString())],
        theme: 'grid',
        styles: { fontSize: 9, cellPadding: 4 }
      })
      currentY = (pdf as any).lastAutoTable.finalY + 15
    }

    // Financial Projections Chart
    checkPageBreak(120)
    pdf.setFontSize(18)
    pdf.setFont('helvetica', 'bold')
    pdf.text('Financial Projections', margin, currentY)
    currentY += 15

    const financialData = generateFinancialData()
    const financialChartConfig: ChartConfiguration = {
      type: 'bar',
      data: {
        labels: financialData.quarters,
        datasets: [
          {
            label: 'Revenue',
            data: financialData.revenue,
            backgroundColor: '#10B981',
            borderColor: '#059669',
            borderWidth: 1
          },
          {
            label: 'Costs',
            data: financialData.costs,
            backgroundColor: '#EF4444',
            borderColor: '#DC2626',
            borderWidth: 1
          },
          {
            label: 'Profit',
            data: financialData.profit,
            backgroundColor: '#3B82F6',
            borderColor: '#2563EB',
            borderWidth: 1
          }
        ]
      },
      options: {
        responsive: false,
        animation: false,
        plugins: {
          legend: {
            display: true,
            position: 'bottom',
            labels: {
              font: { size: 12 },
              color: '#374151'
            }
          }
        },
        scales: {
          y: {
            beginAtZero: true,
            grid: { color: '#E5E7EB' },
            ticks: { 
              color: '#6B7280', 
              font: { size: 10 },
              callback: function(value) {
                return '$' + (Number(value) / 1000).toFixed(0) + 'K'
              }
            }
          },
          x: {
            grid: { color: '#E5E7EB' },
            ticks: { color: '#6B7280', font: { size: 10 } }
          }
        }
      }
    }

    try {
      const financialChartImage = await createChartImage(financialChartConfig, 350, 200)
      pdf.addImage(financialChartImage, 'PNG', margin, currentY, maxWidth * 0.8, 100)
      currentY += 110
    } catch (error) {
      console.error('Financial chart generation failed:', error)
      // Fallback: Financial table
      pdf.autoTable({
        startY: currentY,
        head: [['Quarter', 'Revenue', 'Costs', 'Profit']],
        body: financialData.quarters.map((q, i) => [
          q,
          '$' + financialData.revenue[i].toLocaleString(),
          '$' + financialData.costs[i].toLocaleString(),
          '$' + financialData.profit[i].toLocaleString()
        ]),
        theme: 'grid',
        styles: { fontSize: 10, cellPadding: 6 }
      })
      currentY = (pdf as any).lastAutoTable.finalY + 15
    }

    // Content Sections with better formatting
    const sections = [
      { title: 'Market Analysis', content: plan.marketAnalysis },
      { title: 'Business Model', content: plan.businessModel },
      { title: 'Marketing Strategy', content: plan.marketingStrategy },
      { title: 'Operations Overview', content: plan.operationsOverview },
      { title: 'Risk Assessment', content: plan.riskAssessment },
      { title: 'Implementation Plan', content: plan.implementation },
      { title: 'Legal Considerations', content: plan.legal }
    ]

    sections.forEach(section => {
      if (section.content) {
        checkPageBreak(40)
        
        // Section header with colored line
        pdf.setDrawColor(59, 130, 246)
        pdf.setLineWidth(2)
        pdf.line(margin, currentY - 5, margin + 50, currentY - 5)
        
        pdf.setFontSize(16)
        pdf.setFont('helvetica', 'bold')
        pdf.setTextColor(51, 65, 85)
        pdf.text(section.title, margin, currentY)
        currentY += 15
        
        pdf.setFontSize(10)
        pdf.setFont('helvetica', 'normal')
        pdf.setTextColor(71, 85, 105)
        const lines = splitText(section.content, maxWidth, 10)
        lines.forEach((line: string) => {
          checkPageBreak(lineHeight)
          pdf.text(line, margin, currentY)
          currentY += lineHeight
        })
        currentY += sectionSpacing
      }
    })

    // Tools Table
    if (plan.tools && plan.tools.length > 0) {
      checkPageBreak(60)
      pdf.setFontSize(16)
      pdf.setFont('helvetica', 'bold')
      pdf.setTextColor(51, 65, 85)
      pdf.text('Recommended Tools', margin, currentY)
      currentY += 15

      const toolsData = plan.tools.slice(0, 10).map((tool, index) => [
        (index + 1).toString(),
        tool.name,
        tool.category,
        tool.pricing
      ])

      pdf.autoTable({
        startY: currentY,
        head: [['#', 'Tool Name', 'Category', 'Pricing']],
        body: toolsData,
        theme: 'striped',
        styles: {
          fontSize: 9,
          cellPadding: 5,
          textColor: [51, 65, 85]
        },
        headStyles: {
          fillColor: [59, 130, 246],
          textColor: [255, 255, 255],
          fontStyle: 'bold'
        },
        columnStyles: {
          0: { cellWidth: 15 },
          1: { cellWidth: maxWidth * 0.35 },
          2: { cellWidth: maxWidth * 0.25 },
          3: { cellWidth: maxWidth * 0.25 }
        }
      })

      currentY = (pdf as any).lastAutoTable.finalY + 20
    }

    // Funding Options Table
    if (plan.funding && plan.funding.length > 0) {
      checkPageBreak(60)
      pdf.setFontSize(16)
      pdf.setFont('helvetica', 'bold')
      pdf.setTextColor(51, 65, 85)
      pdf.text('Funding Options', margin, currentY)
      currentY += 15

      const fundingData = plan.funding.map((funding, index) => [
        (index + 1).toString(),
        funding.platform,
        funding.type,
        funding.range,
        funding.successRate
      ])

      pdf.autoTable({
        startY: currentY,
        head: [['#', 'Platform', 'Type', 'Range', 'Success Rate']],
        body: fundingData,
        theme: 'striped',
        styles: {
          fontSize: 9,
          cellPadding: 5,
          textColor: [51, 65, 85]
        },
        headStyles: {
          fillColor: [16, 185, 129],
          textColor: [255, 255, 255],
          fontStyle: 'bold'
        },
        columnStyles: {
          0: { cellWidth: 15 },
          1: { cellWidth: maxWidth * 0.3 },
          2: { cellWidth: maxWidth * 0.2 },
          3: { cellWidth: maxWidth * 0.25 },
          4: { cellWidth: maxWidth * 0.2 }
        }
      })
    }

    // Modern footer on each page
    const totalPages = pdf.getNumberOfPages()
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i)
      
      // Footer background
      pdf.setFillColor(248, 250, 252)
      pdf.rect(0, pageHeight - 25, pageWidth, 25, 'F')
      
      pdf.setFontSize(8)
      pdf.setFont('helvetica', 'normal')
      pdf.setTextColor(107, 114, 128)
      pdf.text(`Generated by PlanSpark AI • ${new Date().toLocaleDateString()}`, margin, pageHeight - 10)
      pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 30, pageHeight - 10)
      
      // Add subtle border
      pdf.setDrawColor(226, 232, 240)
      pdf.setLineWidth(0.5)
      pdf.line(0, pageHeight - 25, pageWidth, pageHeight - 25)
    }

    // Save the PDF
    const fileName = `${plan.feasibility.marketType.replace(/\s+/g, '_')}_Business_Plan_Enhanced.pdf`
    pdf.save(fileName)
    
  } catch (error) {
    console.error('Error generating enhanced PDF:', error)
    throw new Error('Failed to generate enhanced PDF')
  }
}
